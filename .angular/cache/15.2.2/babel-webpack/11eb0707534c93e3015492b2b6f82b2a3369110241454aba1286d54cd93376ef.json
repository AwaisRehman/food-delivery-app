{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Cart } from '../shared/models/Cart';\nimport { CartItem } from '../shared/models/CartItem';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = this.getCartFromLocalStorage();\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  addToCart(food) {\n    let cartItem = this.cart.items.find(item => item.food.id === food.id);\n    if (cartItem) return;\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocalStorage();\n  }\n  removeFromCart(foodId) {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n  changeQuantity(foodId, quantity) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) return;\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  setCartToLocalStorage() {\n    this.cart.totalPrice = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  getCartFromLocalStorage() {\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson ? JSON.parse(cartJson) : new Cart();\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,QAAQ,QAAQ,2BAA2B;;AAMpD,OAAM,MAAOC,WAAW;EAKxBC;IAHQ,SAAI,GAAQ,IAAI,CAACC,uBAAuB,EAAE;IAC1C,gBAAW,GAA0B,IAAIL,eAAe,CAAC,IAAI,CAACM,IAAI,CAAC;EAE3D;EAEhBC,SAAS,CAACC,IAAS;IACnB,IAAIC,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAC7BC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKL,IAAI,CAACK,EAAE,CAAC;IACvC,IAAGJ,QAAQ,EACX;IAEA,IAAI,CAACH,IAAI,CAACI,KAAK,CAACI,IAAI,CAAC,IAAIZ,QAAQ,CAACM,IAAI,CAAC,CAAC;IAExC,IAAI,CAACO,qBAAqB,EAAE;EAC5B;EAEAC,cAAc,CAACC,MAAc;IAC3B,IAAI,CAACX,IAAI,CAACI,KAAK,GAAG,IAAI,CAACJ,IAAI,CAACI,KAAK,CAChCQ,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,IAAII,MAAM,CAAC;IAEvC,IAAI,CAACF,qBAAqB,EAAE;EAC9B;EAEAI,cAAc,CAACF,MAAa,EAAEG,QAAe;IAC3C,IAAIX,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAC/BC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKI,MAAM,CAAC;IACtC,IAAG,CAACR,QAAQ,EAAE;IAEdA,QAAQ,CAACW,QAAQ,GAAGA,QAAQ;IAC5BX,QAAQ,CAACY,KAAK,GAAED,QAAQ,GAAGX,QAAQ,CAACD,IAAI,CAACa,KAAK;IAE9C,IAAI,CAACN,qBAAqB,EAAE;EAC5B;EAEAO,SAAS;IACP,IAAI,CAAChB,IAAI,GAAG,IAAIL,IAAI,EAAE;IAEtB,IAAI,CAACc,qBAAqB,EAAE;EAC9B;EAEAQ,iBAAiB;IACf,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EAGQV,qBAAqB;IAC3B,IAAI,CAACT,IAAI,CAACoB,UAAU,GAAG,IAAI,CAACpB,IAAI,CAACI,KAAK,CACrCiB,MAAM,CAAC,CAACC,OAAO,EAAEC,WAAW,KAAKD,OAAO,GAAGC,WAAW,CAACR,KAAK,EAAE,CAAC,CAAC;IACjE,IAAI,CAACf,IAAI,CAACwB,UAAU,GAAG,IAAI,CAACxB,IAAI,CAACI,KAAK,CACrCiB,MAAM,CAAC,CAACC,OAAO,EAAEC,WAAW,KAAKD,OAAO,GAAGC,WAAW,CAACT,QAAQ,EAAE,CAAC,CAAC;IAEpE,MAAMW,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,IAAI,CAAC;IAC1C4B,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEJ,QAAQ,CAAC;IAEtC,IAAI,CAACP,WAAW,CAACY,IAAI,CAAC,IAAI,CAAC9B,IAAI,CAAC;EAClC;EAEQD,uBAAuB;IAC7B,MAAM0B,QAAQ,GAAGG,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAON,QAAQ,GAAEC,IAAI,CAACM,KAAK,CAACP,QAAQ,CAAC,GAAE,IAAI9B,IAAI,EAAE;EACnD;;AA9DaE,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["BehaviorSubject","Cart","CartItem","CartService","constructor","getCartFromLocalStorage","cart","addToCart","food","cartItem","items","find","item","id","push","setCartToLocalStorage","removeFromCart","foodId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","cartSubject","asObservable","totalPrice","reduce","prevSum","currentItem","totalCount","cartJson","JSON","stringify","localStorage","setItem","next","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\awais\\OneDrive\\Documents\\portfolio\\foodmine\\frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Cart } from '../shared/models/Cart';\nimport { CartItem } from '../shared/models/CartItem';\nimport { Food } from '../shared/models/Food';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\nprivate cart:Cart = this.getCartFromLocalStorage();\nprivate cartSubject: BehaviorSubject<Cart> = new BehaviorSubject(this.cart);\n\nconstructor() { }\n\naddToCart(food:Food):void{\nlet cartItem = this.cart.items\n.find(item => item.food.id === food.id);\nif(cartItem)\nreturn;\n\nthis.cart.items.push(new CartItem(food));\n\nthis.setCartToLocalStorage();\n}\n\nremoveFromCart(foodId: string): void {\n  this.cart.items = this.cart.items\n  .filter(item => item.food.id != foodId);\n\n  this.setCartToLocalStorage();\n}\n\nchangeQuantity(foodId:string, quantity:number) {\n  let cartItem = this.cart.items\n.find(item => item.food.id === foodId);\nif(!cartItem) return;\n\ncartItem.quantity = quantity;\ncartItem.price =quantity * cartItem.food.price;\n\nthis.setCartToLocalStorage();\n}\n\nclearCart(){\n  this.cart = new Cart();\n\n  this.setCartToLocalStorage();\n}\n\ngetCartObservable():Observable<Cart>{\n  return this.cartSubject.asObservable();\n}\n\n\nprivate setCartToLocalStorage():void{\n  this.cart.totalPrice = this.cart.items\n  .reduce((prevSum, currentItem) => prevSum + currentItem.price, 0);\n  this.cart.totalCount = this.cart.items\n  .reduce((prevSum, currentItem) => prevSum + currentItem.quantity, 0);\n\n  const cartJson = JSON.stringify(this.cart);\n  localStorage.setItem('Cart', cartJson);\n\n  this.cartSubject.next(this.cart);\n}\n\nprivate getCartFromLocalStorage():Cart{\n  const cartJson = localStorage.getItem('Cart');\n  return cartJson? JSON.parse(cartJson): new Cart();\n}\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}